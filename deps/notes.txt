###

two reasonable options here:
option 1: check in the binaries.  raylib is ~8 MB, which kind of sucks.  but it's stable.  but also can't repro the binary, unless you have a separate source build, and if you do, then maybe just build it from that?  but might be nice if the library's build uses tools I don't use in the main build, like cmake.
option 2: compile with a script and install to a local directory.  needs the library's build tools available, or needs a hacked up build.

###

cl -I deps/include -link -libpath:deps/lib

###


=== tiff

(not using libgeotiff, just libtiff.  needed to redefine a few tiff tag values that were in libgeotiff, but nothing else needed from that lib.)

git clone https://gitlab.com/libtiff/libtiff (or wget source tar from https://download.osgeo.org/libtiff/)
libtiff git tag v4.7.0

I'm mainly using libtiff instead of a custom implementation because I couldn't figure out the TIFF LZW decompression algorithm.  (The NASA topography images like gebco_08_rev_elev_A1_grey_geo.tif are LZW compressed).

===

for raylib, download https://github.com/raysan5/raylib/releases/download/5.5/raylib-5.5_win64_msvc16.zip
based on my comments in ../main.c, I may want to do a custom raylib build, partially to enable more types of image loading (though that might be interim?)

===

stb
git clone https://github.com/nothings/stb
header-only; no compile

===

qoi
git clone https://github.com/phoboslab/qoi
header-only; no compile
mainly just using this for testing different image format sizes vs load times; may not use it long term

